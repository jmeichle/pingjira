#!/usr/bin/env ruby
#
# Written by  John Meichle
#  Sunday, March 3rd 2013
#
# Setup credential file at the path specified in credsfile variable, or ~/.jiraupdatercreds.json by default.
#  an example config json:
#     { "hostname" : "https://jira.web.com", "username" : "yourusername", "password" : "thepassword" }
#  it is recommended to keep this file 400 permissions for security sake
#
$VERBOSE=nil
require 'rubygems'
require "net/https"
require "uri"
require 'date'
require 'time'
require 'pp'
require 'json'

credsfile = "#{ENV['HOME']}/.jiraupdatercreds.json"
statefile = "#{ENV['HOME']}/.jiraupdater.json"

class String
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end
  def red
    colorize(31)
  end
  def green
    colorize(32)
  end
  def yellow
    colorize(33)
  end
  def cyan
    colorize(36)
  end
end
class Numeric
  def duration
    secs  = self.to_int
    mins  = secs / 60
    hours = mins / 60
    days  = hours / 24

    if days > 0
      "#{days} days and #{hours % 24} hours"
    elsif hours > 0
      "#{hours} hours and #{mins % 60} minutes"
    elsif mins > 0
      "#{mins} minutes and #{secs % 60} seconds"
    elsif secs >= 0
      "#{secs} seconds"
    end
  end
end
begin
	creds = JSON.parse(File.read(credsfile))
	username = creds['username']
	password = creds['password']
	hostname = creds['hostname']
rescue
	puts "NO CREDENTIAL FILE AT #{credsfile}"
	puts "See the header of this file or README.md for credential file format"
	exit 1
end
begin
	screenwidth = `tput cols`.to_i
rescue
	screenwidth = 60
end
begin
  olddata = JSON.parse(File.read(statefile))
rescue
  olddata = {}
end
newdata = {}
uri = URI.parse(hostname)
http = Net::HTTP.new(uri.host, uri.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE
request = Net::HTTP::Get.new('/rest/api/2/search?jql=assignee=currentUser()+AND+NOT+(status+=+Closed+OR+status=Done)')
request.basic_auth username, password
response = http.request(request)
data = JSON.parse(response.body)
seenkeys = []
data['issues'].each do|issue|
	issueKey = issue['key']
	issueProject = issue['fields']['project']['key']
	if ( issueProject == "OP" )
		seenkeys.push(issueKey)
		issueTitle = issue['fields']['summary']
		issueReporter = issue['fields']['reporter']['displayName']
		issueBody = issue['fields']['summary']
		commenturi = hostname
		uricomment = URI.parse(commenturi)
		httpcomment = Net::HTTP.new(uricomment.host, uricomment.port)
		httpcomment.use_ssl = true
		httpcomment.verify_mode = OpenSSL::SSL::VERIFY_NONE
		requestcomment = Net::HTTP::Get.new("/rest/api/2/issue/"+issueKey+"/comment")
		requestcomment.basic_auth username, password
		responsecomment = httpcomment.request(requestcomment)
		datacomment = JSON.parse(responsecomment.body)
		lastTimestamp = datacomment['comments'][-1]['updated']
		issueTotalComments = datacomment['total']
		newdata[issueKey] = issueTotalComments	
		if (olddata.has_key?(issueKey))
			if (newdata[issueKey] > olddata[issueKey])
				puts "Updated Ticket: #{issueKey} - #{issueTitle}".yellow
			else
				tobj = DateTime.strptime(lastTimestamp.split("T")[0] + " " + lastTimestamp.split("T")[1].split(".")[0], '%Y-%m-%d %H:%M:%S')
				diffstr = (Time.now - Time.parse(tobj.to_s)).duration	
				puts "#{issueKey} - No Updates since #{diffstr} ago - #{issueTitle}".green
			end
		else
			olddata[issueKey] = 0
			bodygraphic=" "+"-="*((screenwidth/2)-1)+"-"
			puts "New Issue: #{issueKey} - #{issueTitle}\n#{bodygraphic}\n#{issueBody}\n#{bodygraphic}".red
		end	
		cnt = 0
		datacomment['comments'].each do|comment|
			commentAuthor = comment['author']['displayName']
			commentBody = comment['body']
			commentTimestamp = comment['updated']
			if (olddata.has_key?(issueKey))
				if (cnt >= olddata[issueKey])
					commentgraphic=" "+"-"*(screenwidth-2)+" "
					tobj = DateTime.strptime(commentTimestamp.split("T")[0] + " " + commentTimestamp.split("T")[1].split(".")[0], '%Y-%m-%d %H:%M:%S')
					diffstr = (Time.now - Time.parse(tobj.to_s)).duration
					puts "New comment: #{commentAuthor}  - #{commentTimestamp} - #{diffstr} ago\n#{commentgraphic}\n#{commentBody}\n#{commentgraphic}".yellow
				end
			end
			cnt = cnt+1
		end
		puts "="*screenwidth
	end
end

olddata.keys.each do|thekey|
	if not newdata.has_key?(thekey)
		puts "#{thekey} is no longer in your queue.".cyan
		puts "="*screenwidth
	end
end

File.open(statefile, 'w') {|f| f.write(JSON.generate(newdata)) }

